on:
  workflow_dispatch:
    inputs:
      patchName:
        description: "Name of version patch"
        required: true
      updateLatest:
        type: boolean
        description: "Push image to latest tag"
        default: false

jobs:
  create-patch-image:
    runs-on: ubuntu-latest
    name: Create and publish multi-arch Devkit patch image
    environment: docker_login
    if: startsWith(github.ref, 'refs/heads/release')
    steps:
      - uses: actions/checkout@v3

      - name: Get version
        run: echo CURRENT_VERSION="$(echo ${{ github.ref_name }} | sed -e "s/^release\///")" >> $GITHUB_ENV
      - name: Get tag
        run: echo PATCH_TAG=${{ env.CURRENT_VERSION }}.${{ github.event.inputs.patchName }} >> $GITHUB_ENV

      - name: Create tag
        uses: actions/github-script@v6
        with:
          script: |
            try{
              github.rest.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: 'refs/tags/${{ env.PATCH_TAG }}',
                sha: context.sha
              })
            } catch (error) {
              core.setFailed(error.message);
            }

      - name: Get swagger-ui repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
          repository: swagger-api/swagger-ui
          ref: refs/tags/${{ vars.SWAGGER_UI_VERSION }}
          path: ./swagger-ui

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver-opts: |
            network=host
          platforms: linux/amd64,linux/arm64

      - name: Run local registry
        run: docker run -d --name ${{ vars.TEMP_LOCAL_REGISTRY_NAME }} --network=host registry:2
        shell: bash

      - name: Build and push swagger-ui to local registry
        run: docker buildx build --push --provenance=false --network=host --platform linux/amd64 -t localhost:5000/swagger-ui:${{ vars.SWAGGER_UI_VERSION }} ./swagger-ui/.
        shell: bash

      - name: Login to image public registry
        uses: docker/login-action@v2
        with:
          registry: ${{ vars.IMAGE_REGISTRY }}
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build and push imgae public registry
        uses: docker/build-push-action@v4
        with:
          push: true
          provenance: false
          platforms: linux/amd64
          build-args: |
            SWAGGER_UI_IMAGE=swagger-ui:${{ vars.SWAGGER_UI_VERSION }}
            LOCAL_REGISTRY=localhost:5000/
          tags: |
            ${{ vars.IMAGE_REGISTRY }}/${{ vars.IMAGE_NAME }}:${{ env.PATCH_TAG }}

      # - name: Build and push latest image to public registry
      #   if: ${{ github.event.inputs.updateLatest }}
      #   uses: docker/build-push-action@v4
      #   with:
      #     push: true
      #     provenance: false
      #     platforms: linux/amd64,linux/arm64
      #     build-args: |
      #       SWAGGER_UI_IMAGE=swagger-ui:${{ vars.SWAGGER_UI_VERSION }}
      #       LOCAL_REGISTRY=localhost:5000/
      #     tags: |
      #       ${{ vars.IMAGE_REGISTRY }}/${{ vars.IMAGE_NAME }}:latest

      - name: Create release
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              const response = await github.rest.repos.createRelease({
                draft: false,
                generate_release_notes: true,
                name: process.env.PATCH_TAG,
                owner: context.repo.owner,
                prerelease: false,
                repo: context.repo.repo,
                tag_name: process.env.PATCH_TAG,
              });

              core.exportVariable('RELEASE_ID', response.data.id);
              core.exportVariable('RELEASE_UPLOAD_URL', response.data.upload_url);
            } catch (error) {
              core.setFailed(error.message);
            }

      - name: Pull image amd64
        run: docker pull ${{ vars.IMAGE_REGISTRY }}/${{ vars.IMAGE_NAME }}:${{ env.PATCH_TAG }} --platform amd64
      - name: Create artifact
        run: docker save ${{ vars.IMAGE_REGISTRY }}/${{ vars.IMAGE_NAME }}:${{ env.PATCH_TAG }} > ~/fusion-devkit-amd64-${{ env.PATCH_TAG }}.tar
      - name: Check artifact
        run: ls -la ~ | grep .tar
      # - name: Create image arm64 artifact
      #   run: |
      #     docker pull ${{ vars.IMAGE_REGISTRY }}/${{ vars.IMAGE_NAME }}:${{ env.PATCH_TAG }} --platform arm64 && docker save ${{ vars.IMAGE_REGISTRY }}/${{ vars.IMAGE_NAME }} > fusion-devkit-arm64${{ env.PATCH_TAG }}.tar

      # - name: Upload artifact
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: fusion-devkit-arm64${{ env.CURRENT_VERSION }}.tar
      #     path: fusion-devkit-arm64${{ env.CURRENT_VERSION }}.tar

      # - name: Upload artifact
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: fusion-devkit-amd64${{ env.CURRENT_VERSION }}.tar
      #     path: fusion-devkit-arm64${{ env.CURRENT_VERSION }}.tar
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ~/fusion-devkit-amd64-${{ env.PATCH_TAG }}.tar
          asset_name: fusion-devkit-amd64-${{ env.PATCH_TAG }}.tar
          asset_content_type: application/x-tar
      # - name: Upload release asset
      #   uses: actions/github-script@v6
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     script: |
      #       const fs = require('fs')
      #       try {
      #         const response = await github.rest.repos.uploadReleaseAsset({
      #           owner: context.repo.owner,
      #           repo: context.repo.repo,
      #           release_id:  ${{ env.RELEASE_ID }},
      #           name: "fusion-devkit-amd64${{ env.PATCH_TAG }}.tar",
      #           data: fs.createReadStream('~/fusion-devkit-amd64-${{ env.PATCH_TAG }}.tar'),
      #         });
      #       } catch (error) {
      #         core.setFailed(error.message);
      #       }
