on:
  workflow_dispatch:
    inputs:
      versionName:
        description: "Name of version (x.x)"
        required: true
      patchName:
        description: "Name of version patch"
        default: "0"

jobs:
  publish-release-image:
    runs-on: ubuntu-latest
    name: Create and publish multi-arch Devkit image
    environment: docker_login
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3

      - name: Create release branch
        run: git checkout -b release/v${{ github.event.inputs.versionName }}

      - name: Initialize git config
        run: |
          git config user.name "GitHub Actions"
          git config user.email noreply@github.com

      - name: Get tag
        run: echo RELEASE_TAG=v${{ github.event.inputs.versionName }}.${{ github.event.inputs.patchName }} >> $GITHUB_ENV

      - name: Create tag
        run: git tag ${{ env.RELEASE_TAG }}

      - name: Push new branch
        run: git push origin release/v${{ github.event.inputs.versionName }} --tags

      - uses: actions/checkout@v3

      - name: Get swagger-ui repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
          repository: swagger-api/swagger-ui
          ref: refs/tags/${{ vars.SWAGGER_UI_VERSION }}
          path: ./swagger-ui

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver-opts: |
            network=host
          platforms: linux/amd64,linux/arm64

      - name: Run local registry
        run: docker run -d --name ${{ vars.TEMP_LOCAL_REGISTRY_NAME }} --network=host registry:2
        shell: bash

      - name: Build and push swagger-ui to local registry
        run: docker buildx build --push --provenance=false --network=host --platform linux/amd64,linux/arm64 -t localhost:5000/swagger-ui:${{ vars.SWAGGER_UI_VERSION }} ./swagger-ui/.
        shell: bash

      - name: Login to image public registry
        uses: docker/login-action@v2
        with:
          registry: ${{ vars.IMAGE_REGISTRY }}
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build and push imgae public registry
        uses: docker/build-push-action@v4
        with:
          push: true
          provenance: false
          platforms: linux/amd64,linux/arm64
          build-args: |
            SWAGGER_UI_IMAGE=swagger-ui:${{ vars.SWAGGER_UI_VERSION }}
            LOCAL_REGISTRY=localhost:5000/
          tags: |
            ${{ vars.IMAGE_REGISTRY }}/${{ vars.IMAGE_NAME }}:${{ env.RELEASE_TAG }} 
            ${{ vars.IMAGE_REGISTRY }}/${{ vars.IMAGE_NAME }}:latest
  create-release:
    name: Release
    runs-on: ubuntu-latest
    environment: fusion-devkit-env
    steps:
      - uses: actions/checkout@v3

      - name: Get tag
        run: echo RELEASE_TAG=v${{ github.event.inputs.versionName }}.${{ github.event.inputs.patchName }} >> $GITHUB_ENV

      - name: Create release
        uses: "actions/github-script@v6"
        with:
          github-token: "${{ inputs.github-token }}"
          script: |
            try {
              const response = await github.rest.repos.createRelease({
                draft: false,
                generate_release_notes: true,
                name: process.env.RELEASE_TAG,
                owner: context.repo.owner,
                prerelease: false,
                repo: context.repo.repo,
                tag_name: process.env.RELEASE_TAG,
              });

              core.exportVariable('RELEASE_ID', response.data.id);
              core.exportVariable('RELEASE_UPLOAD_URL', response.data.upload_url);
            } catch (error) {
              core.setFailed(error.message);
            }
